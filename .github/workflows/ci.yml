name: OpenTofu Module CI Pipeline

on:
  push:
    branches-ignore:
      - main

env:
  OPENTOFU_VERSION: "1.8.8"

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      run_job: ${{ steps.changes.outputs.run_job }}
      changed_tf_files: ${{ steps.changes.outputs.changed_tf_files }}
    steps:
      - id: checkout_repo
        name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: changes
        name: Get list of changed TF and YAML files
        run: |
          # Check if the current branch has no commits (i.e., it's the first commit)
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "This is the first commit on the branch. Running job."
            echo "run_job=true" >> "$GITHUB_OUTPUT"
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '*.tf' '*.yml')
            CHANGED_TF_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} -- '*.tf')
            if [ -n "$CHANGED_FILES" ]; then
              echo "run_job=true" >> "$GITHUB_OUTPUT"
              echo "changed_tf_files=${CHANGED_TF_FILES}" >> "$GITHUB_OUTPUT"
            else
              echo "run_job=false" >> "$GITHUB_OUTPUT"
            fi
          fi

  tofu-fmt:
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.run_job == 'true'
    env:
      CHANGED_TF_FILES: ${{ needs.changed-files.outputs.changed_tf_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OpenTofu
        uses: ./.github/actions/tofu-install
        with:
          version: ${{ env.OPENTOFU_VERSION }}      

      - name: Format changed OpenTofu .tf files
        run: |
          if [ -n "$CHANGED_TF_FILES" ]; then
            echo "Formatting changed files: $CHANGED_TF_FILES"
            tofu fmt -check $CHANGED_TF_FILES
            if [ $? -ne 0 ]; then
              echo "Formatting error found"
              exit 1
            fi
          else
            echo "No Terraform/OpenTofu files changed."
          fi

  tflint:
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.run_job == 'true'
    env:
      CHANGED_TF_FILES: ${{ needs.changed-files.outputs.changed_tf_files }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache plugin dir
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.54.0

      - name: Show version
        run: tflint --version

      - name: Run TFLint on changed Terraform/OpenTofu files in modules
        run: |
          if [ -n "$CHANGED_TF_FILES" ]; then
            for dir in $(echo "$CHANGED_TF_FILES" | xargs -n1 dirname | sort -u); do
              echo "Linting Terraform files in $dir"
              tflint --chdir=$dir --recursive
              if [ $? -ne 0 ]; then
                echo "TFLint error found"
                exit 1
              fi
            done
          else
            echo "No Terraform/OpenTofu files changed."
          fi
  
  bootstrap-test:
    runs-on: ubuntu-latest
    needs: [changed-files, tofu-fmt, tflint]
    if: needs.changed-files.outputs.run_job == 'true'
    environment: sbx
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          mask-aws-account-id: true

      - name: Run Bootstrap Script
        working-directory: examples/sales-spoke-vpc/bootstrap
        run: |
          chmod +x bootstrap.sh
          ./bootstrap.sh ${{ vars.ENVIRONMENT }}

  test-tofu-plan:
    needs: [changed-files, bootstrap-test]
    runs-on: ubuntu-latest
    if: needs.changed-files.outputs.run_job == 'true'
    environment: sbx
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          mask-aws-account-id: true

      - name: Install OpenTofu
        uses: ./.github/actions/tofu-install
        with:
          version: ${{ env.OPENTOFU_VERSION }}

      - name: Tofu Init
        working-directory: examples/sales-spoke-vpc
        run: tofu init --var-file="environments/${{ vars.ENVIRONMENT }}/terraform.tfvars"

      - name: Tofu Plan
        working-directory: examples/sales-spoke-vpc
        run: tofu plan --var-file="environments/${{ vars.ENVIRONMENT }}/terraform.tfvars"

  
  test-tofu-apply:
    needs: [changed-files, test-tofu-plan]
    runs-on: ubuntu-latest
    if: needs.changed-files.outputs.run_job == 'true'
    environment: sbx-approval
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          mask-aws-account-id: true

      - name: Install OpenTofu
        uses: ./.github/actions/tofu-install
        with:
          version: ${{ env.OPENTOFU_VERSION }}       

      - name: Tofu Init
        working-directory: examples/sales-spoke-vpc
        run: tofu init --var-file="environments/${{ vars.ENVIRONMENT }}/terraform.tfvars"

      - name: Tofu Apply
        working-directory: examples/sales-spoke-vpc
        run: tofu apply --var-file="environments/${{ vars.ENVIRONMENT }}/terraform.tfvars" -auto-approve

  test-tofu-destroy:
    needs: [changed-files, test-tofu-apply]
    runs-on: ubuntu-latest
    if: needs.changed-files.outputs.run_job == 'true'
    environment: sbx-approval
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          mask-aws-account-id: true

      - name: Install OpenTofu
        uses: ./.github/actions/tofu-install
        with:
          version: ${{ env.OPENTOFU_VERSION }}        

      - name: Tofu Init
        working-directory: examples/sales-spoke-vpc
        run: tofu init --var-file="environments/${{ vars.ENVIRONMENT }}/terraform.tfvars"

      - name: Tofu Destroy
        working-directory: examples/sales-spoke-vpc
        run: tofu destroy --var-file="environments/${{ vars.ENVIRONMENT }}/terraform.tfvars" -auto-approve
      
  pre-release-tag:
    needs: [test-tofu-destroy]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    if: github.ref != 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: |
          git fetch --tags  # Ensure that all tags are fetched

      - name: Set Git user for tagging
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get latest stable tag
        id: version
        run: |
          # Fetch the latest stable version tag
          latest_stable_tag=$(git tag -l "v*" | grep -v "beta" | sort -V | tail -n 1)
          if [ -z "$latest_stable_tag" ]; then
            latest_stable_tag="v0.0.0"
          fi
          echo "Latest stable tag: $latest_stable_tag"
                    
          # Extract major, minor, patch from last tag
          version_base=$(echo $latest_stable_tag | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1.\2.\3/')
          echo "Base version: $version_base"
          
          # Count the number of betas by finding all existing tags that start with the version base
          beta_count=$(git tag -l "v${version_base}-beta*" | wc -l)
          next_beta=$((beta_count + 1))
          
          # Construct the new beta version
          new_version="v${version_base}-beta.${next_beta}"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create pre-release tag
        run: |
          git tag -a $new_version -m "Pre-release version $new_version"
          git push origin $new_version

  create-pull-request:
    runs-on: ubuntu-latest
    needs: pre-release-tag
    environment: sbx
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract branch name
        id: extract_branch
        run: echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Create Pull Request
        run: |
          echo "Creating a pull request for branch: $branch_name"
          gh pr create \
            --base main \
            --head $branch_name \
            --title "Auto PR (Modify title with feature|bugfix|release|etc): $branch_name" \
            --body "This PR was auto-generated for branch $branch_name."         